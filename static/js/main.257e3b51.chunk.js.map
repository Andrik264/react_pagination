{"version":3,"sources":["Pagination.tsx","App.tsx","index.tsx"],"names":["perPageOptions","Pagination","total","perPage","page","onPageChange","useState","previousPage","updatePreviousPage","nextPage","updateNextPage","itemsPerPage","onPerPageChange","paginationNumbers","numberCount","formula","pagesNeeded","Number","isInteger","Math","floor","Array","fill","map","_","index","getArrayOfNumbers","paginationNumbersForRender","filter","number","totalPagesCount","length","useEffect","handlePageChange","newPage","className","name","onChange","event","target","value","optionValue","classNames","disabled","onClick","href","currentPageNeighboursLength","pageNumber","active","App","React","memo","currentPage","changePage","ReactDOM","render","document","getElementById"],"mappings":"2NAuBA,IAAMA,EAAiB,CAAC,EAAG,EAAG,GAAI,IAErBC,EAAa,SAAC,GAKH,IAJtBC,EAIqB,EAJrBA,MAIqB,IAHrBC,eAGqB,MAHX,EAGW,MAFrBC,YAEqB,MAFd,EAEc,EADrBC,EACqB,EADrBA,aAEA,EAA2CC,mBAASF,EAAO,GAA3D,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAmCF,mBAASF,EAAO,GAAnD,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAwCJ,mBAASH,GAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAEMC,EAvBR,SAA2BC,EAAqBX,GAC9C,IAAMY,EAAUD,EAAcX,EACxBa,EAAcC,OAAOC,UAAUH,GACjCA,EACAI,KAAKC,MAAML,GAAW,EAE1B,OAAO,IAAIM,MAAML,GAAaM,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAC/C,OAAOA,EAAQ,KAgBSC,CAAkBxB,EAAOS,GAC7CgB,EAA6Bd,EAAkBe,QACnD,SAAAC,GAAM,OAAIA,EAAS,IAAMzB,GAAQyB,EAAS,IAAMzB,GAAQyB,IAAWzB,KAE/D0B,EAAkBjB,EAAkBkB,OAE1CC,qBAAU,WACRxB,EAAmBJ,EAAO,GAC1BM,EAAeN,EAAO,KACrB,CAACA,IAEJ,IAAM6B,EAAqC,SAACC,GACtCA,EAAUJ,GAAmBI,EAAU,GAI3C7B,EAAa6B,IAGf,OACE,qCACE,qBAAKC,UAAU,kBAAf,SACE,mDAGE,wBACEC,KAAK,UACLC,SAAU,SAACC,GAAD,OAAW1B,GAAiB0B,EAAMC,OAAOC,QAFrD,SAIGxC,EAAeuB,KAAI,SAAAkB,GAAW,OAC7B,wBAAQD,MAAOC,EAAf,SACGA,GAD8BA,aAQzC,qBAAK,aAAW,0BAAhB,SACE,qBAAIN,UAAU,aAAd,UACE,oBACEA,UAAWO,IAAW,YAAa,CACjCC,SAAmB,IAATvC,IAEZwC,QAAS,kBAAMX,EAAiB1B,IAChC,cAAY,OALd,SAOE,mBACE4B,UAAU,YACVU,KAAI,WAAMtC,GAFZ,SAIE,sBAAM,cAAY,OAAlB,sBAIHH,EAxD2B,GAyD1B,qCACE,oBACE+B,UAAU,YACVS,QAAS,kBAAMX,EAAiB,IAChC,cAAY,OAHd,SAKE,mBACEE,UAAU,YACVU,KAAK,KAFP,iBAQDzC,EAAO0C,GACN,oBAAIX,UAAU,qBAAd,SACE,sBAAMA,UAAU,YAAY,cAAY,OAAxC,sBAMPR,EACEJ,KAAI,SAACwB,GACJ,OACE,oBACEZ,UAAWO,IAAW,YAAa,CACjCM,OAAQ5C,IAAS2C,IAGnBH,QAAS,kBAAMX,EAAiBc,IAChC,cAAY,OANd,SAQE,mBACEZ,UAAU,YACVU,KAAI,WAAME,GAFZ,SAIGA,KAREA,MAcZ3C,GAAQ0B,EApGmB,GAqG1B,qCACG1B,EAAO0B,EAtGgB,GAuGtB,oBAAIK,UAAU,qBAAd,SACE,sBAAMA,UAAU,YAAY,cAAY,OAAxC,mBAIJ,oBACEA,UAAU,YACVS,QAAS,kBAAMX,EAAiBH,IAChC,cAAY,OAHd,SAKE,mBACEK,UAAU,YACVU,KAAI,WAAMf,GAFZ,SAIGA,SAMT,oBACEK,UAAWO,IAAW,YAAa,CACjCC,SAAUvC,IAAS0B,IAErBc,QAAS,kBAAMX,EAAiBxB,IAChC,cAAY,OALd,SAOE,mBACE0B,UAAU,YACVU,KAAI,WAAMpC,GAFZ,SAIE,sBAAM,cAAY,OAAlB,+BCvJCwC,EAbOC,IAAMC,MAAK,WAC/B,MAAkC7C,mBAAS,GAA3C,mBAAO8C,EAAP,KAAoBC,EAApB,KAEA,OACE,cAAC,EAAD,CACEnD,MAAO,GACPC,QAAS,EACTC,KAAMgD,EACN/C,aAAcgD,OCTpBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.257e3b51.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport classNames from 'classnames';\n\ninterface PaginationProps {\n  total: number;\n  perPage: number;\n  page: number;\n  onPageChange: HandlePageChange;\n}\n\ntype HandlePageChange = (newPage: number) => void;\n\nfunction getArrayOfNumbers(numberCount: number, perPage: number): number[] {\n  const formula = numberCount / perPage;\n  const pagesNeeded = Number.isInteger(formula)\n    ? formula\n    : Math.floor(formula) + 1;\n\n  return new Array(pagesNeeded).fill(null).map((_, index) => {\n    return index + 1;\n  });\n}\n\nconst perPageOptions = [3, 5, 10, 20];\n\nexport const Pagination = ({\n  total,\n  perPage = 5,\n  page = 1,\n  onPageChange,\n}: PaginationProps) => {\n  const [previousPage, updatePreviousPage] = useState(page - 1);\n  const [nextPage, updateNextPage] = useState(page + 1);\n  const [itemsPerPage, onPerPageChange] = useState(perPage);\n  const currentPageNeighboursLength = 2;\n  const paginationNumbers = getArrayOfNumbers(total, itemsPerPage);\n  const paginationNumbersForRender = paginationNumbers.filter(\n    number => number + 1 === page || number - 1 === page || number === page,\n  );\n  const totalPagesCount = paginationNumbers.length;\n\n  useEffect(() => {\n    updatePreviousPage(page - 1);\n    updateNextPage(page + 1);\n  }, [page]);\n\n  const handlePageChange: HandlePageChange = (newPage) => {\n    if (newPage > totalPagesCount || newPage < 1) {\n      return;\n    }\n\n    onPageChange(newPage);\n  };\n\n  return (\n    <>\n      <div className=\"perPage__select\">\n        <label>\n          Per page: &nbsp;\n\n          <select\n            name=\"perPage\"\n            onChange={(event) => onPerPageChange(+event.target.value)}\n          >\n            {perPageOptions.map(optionValue => (\n              <option value={optionValue} key={optionValue}>\n                {optionValue}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination\">\n          <li\n            className={classNames('page-item', {\n              disabled: page === 1,\n            })}\n            onClick={() => handlePageChange(previousPage)}\n            aria-hidden=\"true\"\n          >\n            <a\n              className=\"page-link\"\n              href={`#${previousPage}`}\n            >\n              <span aria-hidden=\"true\">&laquo;</span>\n            </a>\n          </li>\n\n          {page > currentPageNeighboursLength && (\n            <>\n              <li\n                className=\"page-item\"\n                onClick={() => handlePageChange(1)}\n                aria-hidden=\"true\"\n              >\n                <a\n                  className=\"page-link\"\n                  href=\"#1\"\n                >\n                  1\n                </a>\n              </li>\n\n              {page > currentPageNeighboursLength + 1 && (\n                <li className=\"page-item disabled\">\n                  <span className=\"page-link\" aria-hidden=\"true\">...</span>\n                </li>\n              )}\n            </>\n          )}\n\n          {paginationNumbersForRender\n            .map((pageNumber) => {\n              return (\n                <li\n                  className={classNames('page-item', {\n                    active: page === pageNumber,\n                  })}\n                  key={pageNumber}\n                  onClick={() => handlePageChange(pageNumber)}\n                  aria-hidden=\"true\"\n                >\n                  <a\n                    className=\"page-link\"\n                    href={`#${pageNumber}`}\n                  >\n                    {pageNumber}\n                  </a>\n                </li>\n              );\n            })}\n\n          {page <= totalPagesCount - currentPageNeighboursLength && (\n            <>\n              {page < totalPagesCount - currentPageNeighboursLength && (\n                <li className=\"page-item disabled\">\n                  <span className=\"page-link\" aria-hidden=\"true\">...</span>\n                </li>\n              )}\n\n              <li\n                className=\"page-item\"\n                onClick={() => handlePageChange(totalPagesCount)}\n                aria-hidden=\"true\"\n              >\n                <a\n                  className=\"page-link\"\n                  href={`#${totalPagesCount}`}\n                >\n                  {totalPagesCount}\n                </a>\n              </li>\n            </>\n          )}\n\n          <li\n            className={classNames('page-item', {\n              disabled: page === totalPagesCount,\n            })}\n            onClick={() => handlePageChange(nextPage)}\n            aria-hidden=\"true\"\n          >\n            <a\n              className=\"page-link\"\n              href={`#${nextPage}`}\n            >\n              <span aria-hidden=\"true\">&raquo;</span>\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n};\n","import './App.css';\nimport React, { useState } from 'react';\nimport { Pagination } from './Pagination';\n\nconst App: React.FC = React.memo(() => {\n  const [currentPage, changePage] = useState(1);\n\n  return (\n    <Pagination\n      total={42}\n      perPage={5}\n      page={currentPage}\n      onPageChange={changePage}\n    />\n  );\n});\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}